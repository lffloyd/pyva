#        GRAMÁTICA ATUALIZADA EBNF ---> BNF WITH OUR TOKENS
#        SÍMBOLOS NÃO TERMINAIS ------> Maiúsculo
#        SÍMBOLOS TERMINAIS ----------> Minúsculo



#        PROG -> MAIN CONJ_CLASSES
#
#        MAIN -> class id lkey public static void main lparen string lbracket rbracket id rparen
#        lkey CMD rkey rkey
#
#        CONJ_CLASSES -> episilon
#        | CONJ_CLASSES CLASSE
#
#        CLASSE -> class id EXTENSION lkey CONJ_VAR CONJ_METODOS rkey
#
#        EXTENSION -> episilon 
#        | extends id
#
#        CONJ_VAR -> episilon | CONJ_VAR VAR
#
#        CONJ_METODOS -> episilon | CONJ_METODOS METODO
#
#        VAR -> TIPO id ;
#
#        METODO -> public TIPO id lparen PARAMS rparen lkey CONJ_VAR CONJ_CMD return EXP ; rkey
#
#        CONJ_CMD -> episilon 
#        | CONJ_CMD CMD
#
#        PARAMS -> episilon 
#        | CONJ_PARAMS
#
#        CONJ_PARAMS -> TIPO id MAIS_PARAM
#
#        MAIS_PARAM -> episilon
#        | MAIS_PARAM , TIPO id
#
#        TIPO -> int lbracket rbracket
#        | boolean
#        | int
#        | id
#
#        CMD -> lkey CONJ_CMD rkey
#        | if lparen EXP rparen CMD
#        | if lparen EXP rparen CMD else CMD
#        | while lparen EXP rparen CMD
#        | Systemoutprintln lparen EXP rparen ;
#        | id = EXP ;
#        | id lbracket EXP rbracket attr EXP ;
#
#        EXP -> EXP and REXP
#        | REXP
#
#        REXP -> REXP lthan AEXP
#        | REXP equals AEXP
#        | REXP nequals AEXP
#        | AEXP
#
#        AEXP -> AEXP plus MEXP
#        | AEXP minus MEXP
#        | MEXP
#
#        MEXP -> MEXP times SEXP
#        | SEXP
#
#        SEXP -> not SEXP
#        | minus SEXP
#        | true
#        | false
#        | num
#        | null
#        | new int lbracket EXP rbracket
#        | PEXP . length
#        | PEXP lbracket EXP rbracket
#        | PEXP
#
#        PEXP -> id
#        | this
#        | new id lparen rparen
#        | lparen EXP rparen
#        | PEXP . id
#        | PEXP . id lparen OPTION_EXPS rparen
#
#        OPTION_EXPS -> episilon 
#        | EXP 
#
#        EXPS -> EXP CONJ_EXPS
#
#        CONJ_EXPS -> episilon | CONJ_EXPS , EXP
