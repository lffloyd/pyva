
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ATTR BOOLEAN CLASS COLON DOT ELSE EQUALS EXTENDS FALSE GEQTHAN GTHAN ID IF INT LBRACKET LENGTH LEQTHAN LKEY LPAREN LTHAN MAIN MINUS NEQUALS NEW NOT NULL NUMBER PLUS PUBLIC RBRACKET RETURN RKEY RPAREN SEMICOLON STATIC STRING SYSTEMOUTPRINTLN THIS TIMES TRUE VOID WHILEprog : main conj_classesmain : CLASS ID LKEY PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LKEY cmd1 RKEY RKEY\n    conj_classes : empty\n    | conj_classes classe\n    classe : CLASS ID extension LKEY conj_var conj_metodos RKEY\n    extension : empty\n    | EXTENDS ID\n    conj_var : empty\n                | conj_var varconj_metodos : empty\n                    | conj_metodos metodovar : tipo ID SEMICOLONmetodo : PUBLIC tipo ID LPAREN params RPAREN LKEY conj_var conj_cmd RETURN exp SEMICOLON RKEYconj_cmd : empty\n    | conj_cmd cmd1params : empty\n    | conj_paramsconj_params : tipo ID mais_parammais_param : empty\n    | mais_param COLON tipo IDtipo : INT LBRACKET RBRACKET\n    | BOOLEAN\n    | INT\n    | IDcmd1 : LKEY conj_cmd RKEY\n    | IF LPAREN exp RPAREN cmd1\n    | IF LPAREN exp RPAREN cmd2 ELSE cmd1\n    | WHILE LPAREN exp RPAREN cmd1\n    | SYSTEMOUTPRINTLN LPAREN exp RPAREN SEMICOLON\n    | ID ATTR exp SEMICOLON\n    | ID LBRACKET exp RBRACKET ATTR exp SEMICOLONcmd2 : LKEY conj_cmd RKEY\n      | IF LPAREN exp RPAREN cmd2 ELSE cmd2\n      | WHILE LPAREN exp RPAREN cmd2\n      | SYSTEMOUTPRINTLN LPAREN exp RPAREN SEMICOLON\n      | ID ATTR exp SEMICOLON\n      | ID LBRACKET exp RBRACKET ATTR exp SEMICOLONexp : exp AND rexp\n        | rexprexp : rexp LTHAN aexp\n        | rexp EQUALS aexp\n        | rexp NEQUALS aexp\n        | aexpaexp : aexp PLUS mexp\n        | aexp MINUS mexp\n        | mexpmexp : mexp TIMES sexp\n        | sexpsexp : NOT sexp\n       | MINUS sexp\n       | TRUE\n       | FALSE\n       | NUMBER\n       | NULL\n       | NEW INT LBRACKET exp RBRACKET\n       | pexp DOT LENGTH\n       | pexp LBRACKET exp RBRACKET\n       | pexppexp : ID\n       | THIS\n       | LPAREN exp RPAREN\n       | NEW ID LPAREN RPAREN\n       | pexp DOT ID\n       | pexp DOT ID LPAREN option_exps RPARENoption_exps : empty\n       | exp exps : exp conj_exps conj_exps : empty\n                 | conj_exps COLON expempty :'
    
_lr_action_items = {'CLASS':([0,2,4,5,7,30,92,],[3,-70,8,-3,-4,-5,-2,]),'$end':([1,2,4,5,7,30,92,],[0,-70,-1,-3,-4,-5,-2,]),'ID':([3,8,14,16,19,20,22,24,26,27,28,32,36,37,38,41,42,44,51,54,56,61,62,63,64,65,66,68,69,70,71,72,78,80,85,88,90,91,97,98,99,100,101,102,103,104,105,110,111,114,115,125,131,133,135,139,140,144,147,148,149,150,151,152,153,159,161,162,168,169,171,175,176,177,180,],[6,10,17,-70,22,-8,-24,-9,33,-23,-22,22,40,-12,-21,43,22,49,55,-70,-70,22,22,73,73,55,-14,73,73,73,96,55,73,73,109,73,-25,-15,73,-30,73,73,73,73,73,73,73,128,73,138,55,73,73,-26,-70,-28,-29,73,73,55,55,73,73,73,73,-31,-27,-25,138,138,-30,-29,73,138,-31,]),'LKEY':([6,10,12,13,17,20,24,37,48,50,51,54,56,62,65,66,72,90,91,98,114,115,133,135,139,140,148,149,159,161,162,168,169,171,175,177,180,],[9,-70,16,-6,-7,-8,-9,-12,51,54,56,-70,-70,-70,56,-14,56,-25,-15,-30,135,56,-26,-70,-28,-29,56,56,-31,-27,-25,135,135,-30,-29,135,-31,]),'PUBLIC':([9,16,19,20,23,24,25,31,37,154,],[11,-70,-70,-8,32,-9,-10,-11,-12,-13,]),'EXTENDS':([10,],[14,]),'STATIC':([11,],[15,]),'VOID':([15,],[18,]),'INT':([16,19,20,24,32,37,42,54,61,62,85,],[-70,27,-8,-9,27,-12,27,-70,27,27,108,]),'BOOLEAN':([16,19,20,24,32,37,42,54,61,62,],[-70,28,-8,-9,28,-12,28,-70,28,28,]),'RKEY':([16,19,20,23,24,25,31,37,56,57,65,66,67,90,91,98,133,135,139,140,141,149,154,159,161,162,171,175,180,],[-70,-70,-8,30,-9,-10,-11,-12,-70,67,90,-14,92,-25,-15,-30,-26,-70,-28,-29,154,162,-13,-31,-27,-25,-30,-29,-31,]),'MAIN':([18,],[21,]),'RETURN':([20,24,37,54,62,66,72,90,91,98,133,139,140,159,161,162,171,175,180,],[-8,-9,-12,-70,-70,-14,97,-25,-15,-30,-26,-28,-29,-31,-27,-25,-30,-29,-31,]),'IF':([20,24,37,51,54,56,62,65,66,72,90,91,98,114,115,133,135,139,140,148,149,159,161,162,168,169,171,175,177,180,],[-8,-9,-12,58,-70,-70,-70,58,-14,58,-25,-15,-30,132,58,-26,-70,-28,-29,58,58,-31,-27,-25,132,132,-30,-29,132,-31,]),'WHILE':([20,24,37,51,54,56,62,65,66,72,90,91,98,114,115,133,135,139,140,148,149,159,161,162,168,169,171,175,177,180,],[-8,-9,-12,59,-70,-70,-70,59,-14,59,-25,-15,-30,136,59,-26,-70,-28,-29,59,59,-31,-27,-25,136,136,-30,-29,136,-31,]),'SYSTEMOUTPRINTLN':([20,24,37,51,54,56,62,65,66,72,90,91,98,114,115,133,135,139,140,148,149,159,161,162,168,169,171,175,177,180,],[-8,-9,-12,60,-70,-70,-70,60,-14,60,-25,-15,-30,137,60,-26,-70,-28,-29,60,60,-31,-27,-25,137,137,-30,-29,137,-31,]),'LPAREN':([21,40,58,59,60,63,64,68,69,70,78,80,88,97,99,100,101,102,103,104,105,109,111,125,128,131,132,136,137,144,147,150,151,152,153,176,],[29,42,68,69,70,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,126,88,88,144,88,147,150,151,88,88,88,88,88,88,88,]),'LBRACKET':([27,35,55,73,86,87,108,128,130,138,143,167,],[34,39,64,-59,111,-60,125,-63,-61,153,-62,-64,]),'STRING':([29,],[35,]),'SEMICOLON':([33,73,74,75,76,77,79,81,82,83,84,86,87,106,107,116,117,118,119,120,121,122,123,124,127,128,130,143,145,146,155,165,167,170,178,],[37,-59,98,-39,-43,-46,-48,-51,-52,-53,-54,-58,-60,-50,-49,140,141,-38,-40,-41,-42,-44,-45,-47,-56,-63,-61,-62,-57,159,-55,171,-64,175,180,]),'RBRACKET':([34,39,73,75,76,77,79,81,82,83,84,86,87,89,106,107,118,119,120,121,122,123,124,127,128,129,130,142,143,145,155,166,167,],[38,41,-59,-39,-43,-46,-48,-51,-52,-53,-54,-58,-60,113,-50,-49,-38,-40,-41,-42,-44,-45,-47,-56,-63,145,-61,155,-62,-57,-55,172,-64,]),'RPAREN':([42,43,45,46,47,49,52,53,73,75,76,77,79,81,82,83,84,86,87,93,94,95,96,106,107,112,118,119,120,121,122,123,124,126,127,128,130,143,144,145,155,156,157,158,160,163,164,167,],[-70,48,50,-16,-17,-70,-18,-19,-59,-39,-43,-46,-48,-51,-52,-53,-54,-58,-60,114,115,116,-20,-50,-49,130,-38,-40,-41,-42,-44,-45,-47,143,-56,-63,-61,-62,-70,-57,-55,167,-65,-66,168,169,170,-64,]),'COLON':([49,52,53,96,],[-70,61,-19,-20,]),'ATTR':([55,113,138,172,],[63,131,152,176,]),'NOT':([63,64,68,69,70,78,80,88,97,99,100,101,102,103,104,105,111,125,131,144,147,150,151,152,153,176,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'MINUS':([63,64,68,69,70,73,76,77,78,79,80,81,82,83,84,86,87,88,97,99,100,101,102,103,104,105,106,107,111,119,120,121,122,123,124,125,127,128,130,131,143,144,145,147,150,151,152,153,155,167,176,],[78,78,78,78,78,-59,104,-46,78,-48,78,-51,-52,-53,-54,-58,-60,78,78,78,78,78,78,78,78,78,-50,-49,78,104,104,104,-44,-45,-47,78,-56,-63,-61,78,-62,78,-57,78,78,78,78,78,-55,-64,78,]),'TRUE':([63,64,68,69,70,78,80,88,97,99,100,101,102,103,104,105,111,125,131,144,147,150,151,152,153,176,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'FALSE':([63,64,68,69,70,78,80,88,97,99,100,101,102,103,104,105,111,125,131,144,147,150,151,152,153,176,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'NUMBER':([63,64,68,69,70,78,80,88,97,99,100,101,102,103,104,105,111,125,131,144,147,150,151,152,153,176,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'NULL':([63,64,68,69,70,78,80,88,97,99,100,101,102,103,104,105,111,125,131,144,147,150,151,152,153,176,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'NEW':([63,64,68,69,70,78,80,88,97,99,100,101,102,103,104,105,111,125,131,144,147,150,151,152,153,176,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'THIS':([63,64,68,69,70,78,80,88,97,99,100,101,102,103,104,105,111,125,131,144,147,150,151,152,153,176,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'DOT':([73,86,87,128,130,143,167,],[-59,110,-60,-63,-61,-62,-64,]),'TIMES':([73,77,79,81,82,83,84,86,87,106,107,122,123,124,127,128,130,143,145,155,167,],[-59,105,-48,-51,-52,-53,-54,-58,-60,-50,-49,105,105,-47,-56,-63,-61,-62,-57,-55,-64,]),'PLUS':([73,76,77,79,81,82,83,84,86,87,106,107,119,120,121,122,123,124,127,128,130,143,145,155,167,],[-59,103,-46,-48,-51,-52,-53,-54,-58,-60,-50,-49,103,103,103,-44,-45,-47,-56,-63,-61,-62,-57,-55,-64,]),'LTHAN':([73,75,76,77,79,81,82,83,84,86,87,106,107,118,119,120,121,122,123,124,127,128,130,143,145,155,167,],[-59,100,-43,-46,-48,-51,-52,-53,-54,-58,-60,-50,-49,100,-40,-41,-42,-44,-45,-47,-56,-63,-61,-62,-57,-55,-64,]),'EQUALS':([73,75,76,77,79,81,82,83,84,86,87,106,107,118,119,120,121,122,123,124,127,128,130,143,145,155,167,],[-59,101,-43,-46,-48,-51,-52,-53,-54,-58,-60,-50,-49,101,-40,-41,-42,-44,-45,-47,-56,-63,-61,-62,-57,-55,-64,]),'NEQUALS':([73,75,76,77,79,81,82,83,84,86,87,106,107,118,119,120,121,122,123,124,127,128,130,143,145,155,167,],[-59,102,-43,-46,-48,-51,-52,-53,-54,-58,-60,-50,-49,102,-40,-41,-42,-44,-45,-47,-56,-63,-61,-62,-57,-55,-64,]),'AND':([73,74,75,76,77,79,81,82,83,84,86,87,89,93,94,95,106,107,112,117,118,119,120,121,122,123,124,127,128,129,130,142,143,145,146,155,158,160,163,164,165,166,167,178,],[-59,99,-39,-43,-46,-48,-51,-52,-53,-54,-58,-60,99,99,99,99,-50,-49,99,99,-38,-40,-41,-42,-44,-45,-47,-56,-63,99,-61,99,-62,-57,99,-55,99,99,99,99,99,99,-64,99,]),'LENGTH':([110,],[127,]),'ELSE':([134,162,171,173,174,175,179,180,],[148,-32,-36,177,-34,-35,-33,-37,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'main':([0,],[2,]),'conj_classes':([2,],[4,]),'empty':([2,10,16,19,42,49,54,56,62,135,144,],[5,13,20,25,46,53,20,66,66,66,157,]),'classe':([4,],[7,]),'extension':([10,],[12,]),'conj_var':([16,54,],[19,62,]),'conj_metodos':([19,],[23,]),'var':([19,62,],[24,24,]),'tipo':([19,32,42,61,62,],[26,36,44,71,26,]),'metodo':([23,],[31,]),'params':([42,],[45,]),'conj_params':([42,],[47,]),'mais_param':([49,],[52,]),'cmd1':([51,65,72,114,115,148,149,168,169,177,],[57,91,91,133,139,161,91,133,139,161,]),'conj_cmd':([56,62,135,],[65,72,149,]),'exp':([63,64,68,69,70,88,97,111,125,131,144,147,150,151,152,153,176,],[74,89,93,94,95,112,117,129,142,146,158,160,163,164,165,166,178,]),'rexp':([63,64,68,69,70,88,97,99,111,125,131,144,147,150,151,152,153,176,],[75,75,75,75,75,75,75,118,75,75,75,75,75,75,75,75,75,75,]),'aexp':([63,64,68,69,70,88,97,99,100,101,102,111,125,131,144,147,150,151,152,153,176,],[76,76,76,76,76,76,76,76,119,120,121,76,76,76,76,76,76,76,76,76,76,]),'mexp':([63,64,68,69,70,88,97,99,100,101,102,103,104,111,125,131,144,147,150,151,152,153,176,],[77,77,77,77,77,77,77,77,77,77,77,122,123,77,77,77,77,77,77,77,77,77,77,]),'sexp':([63,64,68,69,70,78,80,88,97,99,100,101,102,103,104,105,111,125,131,144,147,150,151,152,153,176,],[79,79,79,79,79,106,107,79,79,79,79,79,79,79,79,124,79,79,79,79,79,79,79,79,79,79,]),'pexp':([63,64,68,69,70,78,80,88,97,99,100,101,102,103,104,105,111,125,131,144,147,150,151,152,153,176,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'cmd2':([114,168,169,177,],[134,173,174,179,]),'option_exps':([144,],[156,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> main conj_classes','prog',2,'p_prog','parser.py',32),
  ('main -> CLASS ID LKEY PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LKEY cmd1 RKEY RKEY','main',17,'p_main','parser.py',44),
  ('conj_classes -> empty','conj_classes',1,'p_conj_classes','parser.py',54),
  ('conj_classes -> conj_classes classe','conj_classes',2,'p_conj_classes','parser.py',55),
  ('classe -> CLASS ID extension LKEY conj_var conj_metodos RKEY','classe',7,'p_classe','parser.py',62),
  ('extension -> empty','extension',1,'p_extension','parser.py',69),
  ('extension -> EXTENDS ID','extension',2,'p_extension','parser.py',70),
  ('conj_var -> empty','conj_var',1,'p_conj_var','parser.py',76),
  ('conj_var -> conj_var var','conj_var',2,'p_conj_var','parser.py',77),
  ('conj_metodos -> empty','conj_metodos',1,'p_conj_metodos','parser.py',83),
  ('conj_metodos -> conj_metodos metodo','conj_metodos',2,'p_conj_metodos','parser.py',84),
  ('var -> tipo ID SEMICOLON','var',3,'p_var','parser.py',90),
  ('metodo -> PUBLIC tipo ID LPAREN params RPAREN LKEY conj_var conj_cmd RETURN exp SEMICOLON RKEY','metodo',13,'p_metodo','parser.py',96),
  ('conj_cmd -> empty','conj_cmd',1,'p_conj_cmd','parser.py',102),
  ('conj_cmd -> conj_cmd cmd1','conj_cmd',2,'p_conj_cmd','parser.py',103),
  ('params -> empty','params',1,'p_params','parser.py',109),
  ('params -> conj_params','params',1,'p_params','parser.py',110),
  ('conj_params -> tipo ID mais_param','conj_params',3,'p_conj_params','parser.py',116),
  ('mais_param -> empty','mais_param',1,'p_mais_param','parser.py',122),
  ('mais_param -> mais_param COLON tipo ID','mais_param',4,'p_mais_param','parser.py',123),
  ('tipo -> INT LBRACKET RBRACKET','tipo',3,'p_tipo','parser.py',129),
  ('tipo -> BOOLEAN','tipo',1,'p_tipo','parser.py',130),
  ('tipo -> INT','tipo',1,'p_tipo','parser.py',131),
  ('tipo -> ID','tipo',1,'p_tipo','parser.py',132),
  ('cmd1 -> LKEY conj_cmd RKEY','cmd1',3,'p_cmd1','parser.py',138),
  ('cmd1 -> IF LPAREN exp RPAREN cmd1','cmd1',5,'p_cmd1','parser.py',139),
  ('cmd1 -> IF LPAREN exp RPAREN cmd2 ELSE cmd1','cmd1',7,'p_cmd1','parser.py',140),
  ('cmd1 -> WHILE LPAREN exp RPAREN cmd1','cmd1',5,'p_cmd1','parser.py',141),
  ('cmd1 -> SYSTEMOUTPRINTLN LPAREN exp RPAREN SEMICOLON','cmd1',5,'p_cmd1','parser.py',142),
  ('cmd1 -> ID ATTR exp SEMICOLON','cmd1',4,'p_cmd1','parser.py',143),
  ('cmd1 -> ID LBRACKET exp RBRACKET ATTR exp SEMICOLON','cmd1',7,'p_cmd1','parser.py',144),
  ('cmd2 -> LKEY conj_cmd RKEY','cmd2',3,'p_cmd2','parser.py',150),
  ('cmd2 -> IF LPAREN exp RPAREN cmd2 ELSE cmd2','cmd2',7,'p_cmd2','parser.py',151),
  ('cmd2 -> WHILE LPAREN exp RPAREN cmd2','cmd2',5,'p_cmd2','parser.py',152),
  ('cmd2 -> SYSTEMOUTPRINTLN LPAREN exp RPAREN SEMICOLON','cmd2',5,'p_cmd2','parser.py',153),
  ('cmd2 -> ID ATTR exp SEMICOLON','cmd2',4,'p_cmd2','parser.py',154),
  ('cmd2 -> ID LBRACKET exp RBRACKET ATTR exp SEMICOLON','cmd2',7,'p_cmd2','parser.py',155),
  ('exp -> exp AND rexp','exp',3,'p_exp','parser.py',161),
  ('exp -> rexp','exp',1,'p_exp','parser.py',162),
  ('rexp -> rexp LTHAN aexp','rexp',3,'p_rexp','parser.py',168),
  ('rexp -> rexp EQUALS aexp','rexp',3,'p_rexp','parser.py',169),
  ('rexp -> rexp NEQUALS aexp','rexp',3,'p_rexp','parser.py',170),
  ('rexp -> aexp','rexp',1,'p_rexp','parser.py',171),
  ('aexp -> aexp PLUS mexp','aexp',3,'p_aexp','parser.py',177),
  ('aexp -> aexp MINUS mexp','aexp',3,'p_aexp','parser.py',178),
  ('aexp -> mexp','aexp',1,'p_aexp','parser.py',179),
  ('mexp -> mexp TIMES sexp','mexp',3,'p_mexp','parser.py',185),
  ('mexp -> sexp','mexp',1,'p_mexp','parser.py',186),
  ('sexp -> NOT sexp','sexp',2,'p_sexp','parser.py',192),
  ('sexp -> MINUS sexp','sexp',2,'p_sexp','parser.py',193),
  ('sexp -> TRUE','sexp',1,'p_sexp','parser.py',194),
  ('sexp -> FALSE','sexp',1,'p_sexp','parser.py',195),
  ('sexp -> NUMBER','sexp',1,'p_sexp','parser.py',196),
  ('sexp -> NULL','sexp',1,'p_sexp','parser.py',197),
  ('sexp -> NEW INT LBRACKET exp RBRACKET','sexp',5,'p_sexp','parser.py',198),
  ('sexp -> pexp DOT LENGTH','sexp',3,'p_sexp','parser.py',199),
  ('sexp -> pexp LBRACKET exp RBRACKET','sexp',4,'p_sexp','parser.py',200),
  ('sexp -> pexp','sexp',1,'p_sexp','parser.py',201),
  ('pexp -> ID','pexp',1,'p_pexp','parser.py',207),
  ('pexp -> THIS','pexp',1,'p_pexp','parser.py',208),
  ('pexp -> LPAREN exp RPAREN','pexp',3,'p_pexp','parser.py',209),
  ('pexp -> NEW ID LPAREN RPAREN','pexp',4,'p_pexp','parser.py',210),
  ('pexp -> pexp DOT ID','pexp',3,'p_pexp','parser.py',211),
  ('pexp -> pexp DOT ID LPAREN option_exps RPAREN','pexp',6,'p_pexp','parser.py',212),
  ('option_exps -> empty','option_exps',1,'p_option_exps','parser.py',217),
  ('option_exps -> exp','option_exps',1,'p_option_exps','parser.py',218),
  ('exps -> exp conj_exps','exps',2,'p_exps','parser.py',224),
  ('conj_exps -> empty','conj_exps',1,'p_conj_exps','parser.py',230),
  ('conj_exps -> conj_exps COLON exp','conj_exps',3,'p_conj_exps','parser.py',231),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',237),
]
